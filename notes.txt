//MVC 

//M --> model (data operation and interaction from database);
//V --> View (whatever user is viewing )
//C --> Controller (application logic)


//user try to login 

//step1 : we will do basic check username and password are valid
//step2: we will check if user has used correct credentials (username and password) connect to database
//step3: we will decide what we need to show 
    //home page 
    //invalid crednetials


//Rest API 
representation state transfer application program interface    

A REST API (Representational State Transfer Application Programming Interface) is a type of API that adheres to the principles of REST. REST is an architectural style for designing networked applications, and it is not a standard or protocol but a set of constraints that help design scalable and stateless web services.

A RESTful API is an API that conforms to the principles and constraints of REST. Essentially, a RESTful API is a REST API that follows REST principles.

Key Differences
REST API: The term broadly refers to APIs designed according to REST principles but doesn’t always fully conform to all REST constraints.

RESTful API: This specifically refers to APIs that adhere strictly to REST constraints and principles, including stateless interactions, uniform interface, and resource-based interactions.

REST Principles and Constraints
To design a RESTful API, follow these guidelines:

Statelessness:

Each request from the client to the server must contain all the information the server needs to fulfill the request. The server should not store any state about the client session between requests.
Client-Server Architecture:

The client and server should be separate entities. The client is responsible for the user interface and user experience, while the server handles data processing and storage.
Uniform Interface:

RESTful APIs should have a consistent and uniform way of interacting with resources. This includes:
Resource Identification: Resources should be identified by URLs.
Resource Manipulation: Use standard HTTP methods (GET, POST, PUT, DELETE) to manipulate resources.
Representation: Resources can be represented in various formats such as JSON, XML, or HTML.
Stateless Communication:

Each request from the client to the server must be independent and contain all the information needed to process the request. The server does not store any client context.
Cacheability:

Responses should explicitly indicate whether they can be cached or not. Caching can improve performance and scalability.
Layered System:

A RESTful system can be composed of multiple layers, with each layer having a specific functionality. For example, a client might interact with an intermediary server, which interacts with another server.
Code on Demand (Optional):

Servers can provide executable code (like JavaScript) to clients to extend client functionality. This is optional and not commonly used in practice.
Designing RESTful APIs
Use HTTP Methods Appropriately: Use GET to retrieve data, POST to create data, PUT/PATCH to update data, and DELETE to remove data.
Design Resources: Identify and design resources (entities) that will be exposed via the API. Use nouns in URLs to represent resources, e.g., /users, /orders.
Version Your API: Include a version number in your API URLs (e.g., /api/v1/users) to manage changes over time.
Use Proper Status Codes: Return appropriate HTTP status codes to indicate the outcome of requests, e.g., 200 OK, 404 Not Found, 500 Internal Server Error.
Document Your API: Provide clear and comprehensive documentation for your API, including endpoints, request and response formats, and usage examples.
By adhering to these principles and guidelines, you can design a RESTful API that is scalable, maintainable, and easy to use.


REST APi --> few guidelines/design you need to follow


RESTfull services


i want to get data of student having id 1

method : get --> read operation

/student-get-data/1
/get-data-from-student/1
/read-data-student/1
/student/1 

method : delete
delete operation 
/delete-student/1
/delete-student-id/1
/student-delete/1
/student/1


CRUD

Create 
 method : POST 
 api : /resource
{

}


Read 
 method : GET 
 api :/resource --> all resource 

api : /resource/id --> only resource having id

Update 
 method : PUT 
 api : /resource/id


Delete 
method :DELETE 
api :/resoucre/id


<%- include('header.ejs') %>

app.set('layout', 'layout'); // Default layout file

<!-- layout.ejs -->
<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/style.css">
</head>
<body>
    <header>
        <h1>My Website</h1>
    </header>
    <main>
        <%- body %>
    </main>
    <footer>
        <p>Footer content goes here.</p>
    </footer>
</body>
</html>

const express = require('express');
const expressLayouts = require('express-ejs-layouts');
const app = express();

app.set('view engine', 'ejs');
app.use(expressLayouts);

app.set('layout', 'layout'); // Default layout file

app.get('/', (req, res) => {
    res.render('index', { title: 'Home Page' });
});

app.get('/about', (req, res) => {
    res.render('about', { title: 'About Us' });
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});



//on home page i want to show all products

//model -->products : [];
//request -->controller --> model -> get products 
controller --> products --> view -->ejs --> controller --> client


CRUD operation 

inventory managment 
 products (books)
create 
read 
update 
delete 

home page i want to see all my products 

route --> '/' --> controller --> model (return products)  -->
controller --> view --> controller --> client


controller -->{} - locals -> {};
{name:'vikas'}
name = 'vikas'

//reference error
if(locals.errorMssg){

}


//we want to edit 
 // what you want to edit 
 // all paramaters except id

 //routes 
 //controller
 //model 
 //edit  


 //data -handling 
 //form --> req.body 
 //postman json -->req.body 
 //query Param ?id=1&b=10 req.query 
 //params 
  /student/1 --> 


  Multer is a middleware for handling multipart/form-data, which is primarily used for uploading files in Node.js. Here’s a detailed explanation to help you understand how to use Multer:

Installation
First, you need to install Multer using npm:

bash
Copy code
npm install multer
Basic Usage
To use Multer in a Node.js application, you need to require it and set it up as middleware in your Express app.

Example: Setting up Multer
Require the necessary modules:

javascript
Copy code
const express = require('express');
const multer = require('multer');
const path = require('path');
Initialize Express:

javascript
Copy code
const app = express();
Configure storage for Multer:
Multer requires a storage configuration, specifying where to store the uploaded files and how to name them.

javascript
Copy code
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Specify the folder to save the files
  },
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname)); // Naming the file
  }
});
Initialize Multer with the storage configuration:

javascript
Copy code
const upload = multer({ storage: storage });
Set up a route to handle file uploads:
Use upload.single for single file uploads, or upload.array for multiple file uploads.

javascript
Copy code
app.post('/upload', upload.single('file'), (req, res) => {
  res.send('File uploaded successfully!');
});

// For multiple files
app.post('/uploadmultiple', upload.array('files', 12), (req, res) => {
  res.send('Files uploaded successfully!');
});
Start the Express server:

javascript
Copy code
app.listen(3000, () => {
  console.log('Server started on http://localhost:3000');
});
Explanation
Storage Configuration:

destination: This is where you define the folder where the files will be stored. You can change 'uploads/' to any directory you prefer.
filename: This function determines the naming convention for the uploaded files. file.fieldname is the name of the form field, and Date.now() ensures a unique timestamp. path.extname(file.originalname) retains the original file extension.
Middleware:

upload.single('file'): This middleware handles single file uploads, where 'file' is the name of the form field used for uploading.
upload.array('files', 12): This handles multiple file uploads, where 'files' is the name of the form field, and 12 is the maximum number of files that can be uploaded at once.
Additional Configuration
File Filters:
You can add filters to allow only certain types of files (e.g., images).

javascript
Copy code
const fileFilter = (req, file, cb) => {
  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {
    cb(null, true);
  } else {
    cb(null, false);
  }
};

const upload = multer({ 
  storage: storage, 
  fileFilter: fileFilter 
});
Limits:
You can set limits on the size of the uploaded files.

javascript
Copy code
const upload = multer({ 
  storage: storage,
  limits: { fileSize: 1024 * 1024 * 5 } // 5MB limit
});
Summary
Multer makes file uploads in Node.js straightforward by providing middleware for handling multipart/form-data. You can configure storage, file naming, file filtering, and size limits easily. Integrating Multer with your Express application involves setting up the storage configuration, initializing Multer, and using it as middleware in your routes to handle file uploads.

while using upload.single we alwasy need to use upload.single('file') or the name of the field we have usr for input type file
ChatGPT
Yes, when using upload.single, you need to use the name of the field that you have specified for the file input in your HTML form. The string parameter passed to upload.single should exactly match the name attribute of the file input field in the form.

Example with HTML Form and upload.single
HTML Form
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>File Upload</title>
</head>
<body>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <input type="file" name="profilePic">
        <button type="submit">Upload</button>
    </form>
</body>
</html>
In this form, the file input field has the name profilePic.

Express Route with Multer
javascript
Copy code
const express = require('express');
const multer = require('multer');
const path = require('path');

const app = express();

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Specify the folder to save the files
  },
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname)); // Naming the file
  }
});

const upload = multer({ storage: storage });

// Here we use 'profilePic' because it matches the name attribute of the file input field in the form
app.post('/upload', upload.single('profilePic'), (req, res) => {
  if (!req.file) {
    return res.status(400).send('No file uploaded.');
  }
  res.send('File uploaded successfully!');
});

app.listen(3000, () => {
  console.log('Server started on http://localhost:3000');
});
Explanation
The HTML form includes a file input with the name attribute set to profilePic.
In the Express route, upload.single('profilePic') is used to handle the file upload. The string 'profilePic' must match the name attribute of the file input field in the form.
This ensures that Multer correctly processes the file uploaded through the profilePic field.
Important Points
Consistency

const express = require('express');
const multer = require('multer');
const path = require('path');

const app = express();

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Specify the folder to save the files
  },
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname)); // Naming the file
  }
});

const upload = multer({ storage: storage }).single('profilePic'); // Initialize Multer
Middleware for Validation
javascript
Copy code
function validateFile(req, res, next) {
  const file = req.file;

  // Perform basic checks
  if (!file) {
    return res.status(400).send('No file uploaded.');
  }

  const validMimeTypes = ['image/jpeg', 'image/png'];
  if (!validMimeTypes.includes(file.mimetype)) {
    return res.status(400).send('Invalid file type.');
  }

  if (file.size > 1024 * 1024 * 5) { // 5MB limit
    return res.status(400).send('File is too large.');
  }

  // If validation passes, move to the next middleware
  next();
}
Route with Validation and Upload Logic
javascript
Copy code
app.post('/upload', (req, res, next) => {
  // First, parse the file to be able to validate it
  upload(req, res, (err) => {
    if (err) {
      return res.status(500).send('Error uploading file.');
    }
    next();
  });
}, validateFile, (req, res) => {
  res.send('File uploaded and validated successfully!');
});

app.listen(3000, () => {
  console.log('Server started on http://localhost:3000');
});
Explanation
Multer Setup: Configure Multer to handle file storage but don't use it immediately as a middleware.
Validation Middleware: Create a middleware function (validateFile) that performs your checks on the file (e.g., file type, file size).
Upload Route:
The first middleware (upload(req, res, (err) => { ... })) handles the file parsing and passes control to the next middleware.
If the file parsing is successful, it moves to the validateFile middleware for validation.
If the file passes all validations, the final middleware sends a success response.
Benefits
Separation of Concerns: By separating validation logic from the upload logic, the code becomes more modular and easier to manage.
Flexibility: You can easily add or modify validation checks without changing the core upload functionality.
Error Handling: Improved error handling as you can send specific error messages based on different validation failures.
This approach provides a clean and modular way to handle file uploads with pre-upload validation checks.

when we sent data using multiform/form-data what happen does data goes in encoding or as binary .
ChatGPT
When you send data using multipart/form-data, it is transmitted as a series of parts, each of which can contain either text or binary data. Here's a detailed breakdown of how it works:

Multipart/Form-Data Overview
Boundary: multipart/form-data uses a unique boundary string to separate different parts of the form data. This boundary is generated by the browser and included in the Content-Type header.

Parts: Each part of the form data contains:

A content-disposition header specifying information such as the name of the form field and the filename (for file uploads).
An optional content-type header indicating the MIME type of the data.
The actual data, which can be either text or binary.
Data Transmission
Text Data
Text data is sent in plain text within each part. Here's an example part containing text data:

css
Copy code
--boundary
Content-Disposition: form-data; name="username"

john_doe
Binary Data
Binary data, such as files, is transmitted in its raw binary form. Here's an example part containing binary data (e.g., an image file):

css
Copy code
--boundary
Content-Disposition: form-data; name="profilePic"; filename="image.png"
Content-Type: image/png

(binary data here)
Example Form Data Submission
When you submit a form with multipart/form-data, the HTTP request body might look like this:

css
Copy code
POST /upload HTTP/1.1
Host: example.com
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="username"

john_doe
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="profilePic"; filename="image.png"
Content-Type: image/png

(binary data here)
------WebKitFormBoundary7MA4YWxkTrZu0gW--



//step 1 : create an delete button in the page 
//step 2: anchor that btn to a link 
//step 3 : write a router 
//step 4 : write a model
//step 5: write a controller 

how to pass data in get request 
/product?id=1&name=vikas&class=10
/product/1

/product?id=1
/product/1

/delete-product/1 --> req.params
/delete-product?id=1 --> query Params --> req.query